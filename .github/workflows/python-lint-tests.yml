name: Lint and Tests

on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
      - release/*

jobs:
  #################
  # TESTS & LINTS #
  #################
  tests:
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.8, 3.9, '3.10']
        os: [ubuntu-latest, macos-latest]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full python version
      id: full-python-version
      run: |
        echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.13
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Set up cache
      uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install -E all
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Lint and static analysis
      run: |
        poetry run isort --check --diff vpype vpype_cli vpype_viewer tests
        poetry run black --check --diff vpype vpype_cli vpype_viewer tests
        poetry run mypy
    # PYTEST STRATEGY
    # macOS is the only runner who has working ModernGL behaviour
    # macOS + 3.10 is used for code coverage
    - name: Pytest (code coverage)
      run: |
        poetry run pytest --cov=./ --cov-report=xml
      if: matrix.os == 'macos-latest' && matrix.python-version == '3.10'
    - name: Pytest
      run: |
        poetry run pytest
      if: matrix.os == 'macos-latest' && matrix.python-version != '3.10'
    - name: Pytest (no image similarity check)
      run: |
        poetry run pytest --skip-image-similarity
      if: matrix.os != 'macos-latest'
    - name: Upload image comparison test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test_report_img_sim_${{ runner.os }}_${{ matrix.python-version }}
        path: test_report_img_sim/**/*
    - name: Upload SVG comparison test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test_report_reference_svg_${{ runner.os }}_${{ matrix.python-version }}
        path: test_report_reference_svg/**/*
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
      if: matrix.os == 'macos-latest' && matrix.python-version == '3.10'


  #################
  # TESTS WINDOWS #
  #################
  tests-windows:
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.8, 3.9, '3.10']
    defaults:
      run:
        shell: bash
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.13
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install dependencies
      run: poetry install -E all
    - name: Pytest
      run: |
        poetry run pytest --skip-image-similarity
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test_report_img_sim_${{ runner.os }}_${{ matrix.python-version }}
        path: test_report_img_sim/**/*

  #####################
  # INSTALLER WINDOWS #
  #####################
  windows-installer:
    defaults:
      run:
        shell: bash
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.13
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install vpype and run PyInstaller
      id: vpype
      run: | 
        poetry install -E all
        VERSION="`poetry version --short`-${GITHUB_SHA}"
        echo ::set-output name=version::${VERSION}
        source $VENV
        scripts/build.bat
    - name: Create NSIS installer
      uses: joncloud/makensis-action@v3.3
      with:
        script-file: scripts\installer_win.nsi
        arguments: /V4 /DVERSION=${{ steps.vpype.outputs.version }}
    - uses: actions/upload-artifact@v2
      with:
        name: vpype-${{ steps.vpype.outputs.version }}-setup.exe
        path: dist/vpype-${{ steps.vpype.outputs.version }}-setup.exe
